{"version":3,"sources":["Search.js","Button.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Search","value","onChange","children","htmlFor","id","type","placeholder","Button","onClick","className","largeColumn","width","midColumn","smallColumn","Table","searchTerm","list","pattern","onDismiss","filter","item","title","toLowerCase","includes","map","key","objectID","style","href","url","author","num_comments","points","App","props","state","result","setSearchTopStories","bind","onSearchChange","this","setState","window","confirm","updatedHits","hits","event","target","fetch","then","response","json","catch","error","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAiBeA,G,MAfA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACjC,OACE,8BACE,2BAAOC,QAAQ,cAAcD,GAC7B,2BACEE,GAAG,aACHC,KAAK,OACLC,YAAY,SACZL,SAAUA,EACVD,MAAOA,OCDAO,EARA,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAAwC,IAA/BC,iBAA+B,MAAnB,GAAmB,EAAfP,EAAe,EAAfA,SACzC,OACE,4BAAQM,QAASA,EAASC,UAAWA,EAAWJ,KAAK,UAClDH,ICCDQ,EAAc,CAClBC,MAAO,OAEHC,EAAY,CAChBD,MAAO,OAEHE,EAAc,CAClBF,MAAO,OA4BMG,EAzBD,SAAC,GAAkC,IAb9BC,EAaFC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC9B,OACE,yBAAKT,UAAU,SACZO,EAAKG,QAhBOJ,EAgBWE,EAhBG,SAAAG,GAAI,OACnCA,EAAKC,MAAMC,cAAcC,SAASR,EAAWO,kBAePE,KAAI,SAAAJ,GAAI,OACxC,yBAAKK,IAAKL,EAAKM,SAAUjB,UAAU,aACjC,0BAAMkB,MAAOjB,GACX,uBAAGkB,KAAMR,EAAKS,KAAMT,EAAKC,QAE3B,0BAAMM,MAAOf,GAAYQ,EAAKU,QAC9B,0BAAMH,MAAOd,GAAcO,EAAKW,cAChC,0BAAMJ,MAAOd,GAAcO,EAAKY,QAChC,0BAAML,MAAOd,GACX,kBAAC,EAAD,CACEL,QAAS,kBAAMU,EAAUE,EAAKM,WAC9BjB,UAAU,iBAFZ,YC+CGwB,E,YAhEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGDC,MAAQ,CACXC,OAAQ,KACRrB,WAZgB,SAelB,EAAKsB,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKpB,UAAY,EAAKA,UAAUoB,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAXL,E,iFAcCF,GAClBI,KAAKC,SAAS,CAAEL,OAAQA,M,gCAGhBhC,GACR,GAAIsC,OAAOC,QAAQ,iBAAkB,CACnC,IAGMC,EAAcJ,KAAKL,MAAMC,OAAOS,KAAK1B,QAH3B,SAAAC,GACd,OAAOA,EAAKM,WAAatB,KAG3BoC,KAAKC,SAAS,CACZL,OAAO,eAAMI,KAAKL,MAAMC,OAAlB,CAA0BS,KAAMD,S,qCAK7BE,GACbN,KAAKC,SAAS,CAAE1B,WAAY+B,EAAMC,OAAO/C,U,0CAGtB,IAAD,OACVe,EAAeyB,KAAKL,MAApBpB,WACRiC,MAAM,GAAD,OAzCS,iCAyCT,OAxCW,UAwCX,YAvCY,UAuCZ,OAA8CjC,IAChDkC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GAAM,OAAI,EAAKC,oBAAoBD,MACxCgB,OAAM,SAAAC,GAAK,OAAIA,O,+BAIV,IAAD,EACsBb,KAAKL,MAA5BpB,EADC,EACDA,WAAYqB,EADX,EACWA,OAClB,OACE,yBAAK3B,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAQT,MAAOe,EAAYd,SAAUuC,KAAKD,gBAA1C,UAGCH,GACC,kBAAC,EAAD,CACEpB,KAAMoB,EAAOS,KACb5B,QAASF,EACTG,UAAWsB,KAAKtB,kB,GAxDZoC,aCEEC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.1cac1317.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Search = ({ value, onChange, children }) => {\n  return (\n    <form>\n      <label htmlFor=\"search-btn\">{children}</label>\n      <input\n        id=\"search-btn\"\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={onChange}\n        value={value}\n      />\n    </form>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Button = ({ onClick, className = \"\", children }) => {\n  return (\n    <button onClick={onClick} className={className} type=\"button\">\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\n\nconst isSearched = searchTerm => item =>\n  item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\nconst largeColumn = {\n  width: \"40%\"\n};\nconst midColumn = {\n  width: \"30%\"\n};\nconst smallColumn = {\n  width: \"10%\"\n};\n\nconst Table = ({ list, pattern, onDismiss }) => {\n  return (\n    <div className=\"table\">\n      {list.filter(isSearched(pattern)).map(item => (\n        <div key={item.objectID} className=\"table-row\">\n          <span style={largeColumn}>\n            <a href={item.url}>{item.title}</a>\n          </span>\n          <span style={midColumn}>{item.author}</span>\n          <span style={smallColumn}>{item.num_comments}</span>\n          <span style={smallColumn}>{item.points}</span>\n          <span style={smallColumn}>\n            <Button\n              onClick={() => onDismiss(item.objectID)}\n              className=\"button-inline\"\n            >\n              x\n            </Button>\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Search from \"./Search\";\nimport Table from \"./Table\";\n\nconst DEFAULT_QUERY = \"redux\";\nconst PATH_BASE = \"https://hn.algolia.com/api/v1\";\nconst PATH_SEARCH = \"/search\";\nconst PARAM_SEARCH = \"query=\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    //binding list to App class local state\n    this.state = {\n      result: null,\n      searchTerm: DEFAULT_QUERY\n    };\n\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  setSearchTopStories(result) {\n    this.setState({ result: result });\n  }\n\n  onDismiss(id) {\n    if (window.confirm(\"Are you sure?\")) {\n      const isNotId = item => {\n        return item.objectID !== id;\n      };\n      const updatedHits = this.state.result.hits.filter(isNotId);\n      this.setState({\n        result: { ...this.state.result, hits: updatedHits }\n      });\n    }\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}`)\n      .then(response => response.json())\n      .then(result => this.setSearchTopStories(result))\n      .catch(error => error);\n  }\n\n  //map  creates new array object with value from callback\n  render() {\n    let { searchTerm, result } = this.state;\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search value={searchTerm} onChange={this.onSearchChange}>\n            Search\n          </Search>\n          {result && (\n            <Table\n              list={result.hits}\n              pattern={searchTerm}\n              onDismiss={this.onDismiss}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n//to refresh application not whole page\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}